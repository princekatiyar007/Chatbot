import React from 'react';
import './AudioWave.css'; // CSS animation defined separately

const AudioWave = ({ isSpeaking }) => {
  return (
    <div className={`wave-container ${isSpeaking ? 'speaking' : ''}`}>
      <div className="bar bar1" />
      <div className="bar bar2" />
      <div className="bar bar3" />
      <div className="bar bar4" />
      <div className="bar bar5" />
    </div>
  );
};

export default AudioWave;



.wave-container {
  display: flex;
  justify-content: center;
  align-items: end;
  gap: 4px;
  height: 40px;
  margin-top: 20px;
}

.bar {
  width: 6px;
  height: 10px;
  background: #4ade80;
  border-radius: 4px;
  animation: none;
}

.speaking .bar1 { animation: wave 0.6s infinite ease-in-out; }
.speaking .bar2 { animation: wave 0.6s infinite ease-in-out 0.1s; }
.speaking .bar3 { animation: wave 0.6s infinite ease-in-out 0.2s; }
.speaking .bar4 { animation: wave 0.6s infinite ease-in-out 0.3s; }
.speaking .bar5 { animation: wave 0.6s infinite ease-in-out 0.4s; }

@keyframes wave {
  0%, 100% {
    height: 10px;
  }
  50% {
    height: 40px;
  }
}









import React, { useState, useEffect } from 'react';
import './index.css';
import InputSection from './components/InputSection';
import SpeakerDisplay from './components/SpeakerDisplay';
import AudioWave from './components/AudioWave';

function App() {
  const [text, setText] = useState('');
  const [speaker, setSpeaker] = useState(null);
  const [voices, setVoices] = useState([]);
  const [isSpeaking, setIsSpeaking] = useState(false);

  useEffect(() => {
    const handleVoicesChanged = () => {
      const availableVoices = speechSynthesis.getVoices();
      setVoices(availableVoices);
    };

    speechSynthesis.addEventListener('voiceschanged', handleVoicesChanged);
    handleVoicesChanged();

    return () => {
      speechSynthesis.removeEventListener('voiceschanged', handleVoicesChanged);
    };
  }, []);

  const handleSubmit = () => {
    if (!text.trim()) return;

    const sentences = text.split(/(?<=[.!?])\s+/);
    let currentSpeaker = 0;

    const maleVoice = voices.find(v => v.name.toLowerCase().includes('david') || v.name.toLowerCase().includes('male'));
    const femaleVoice = voices.find(v => v.name.toLowerCase().includes('zira') || v.name.toLowerCase().includes('female'));

    const speak = (index) => {
      if (index >= sentences.length) {
        setSpeaker(null);
        setIsSpeaking(false);
        return;
      }

      const utterance = new SpeechSynthesisUtterance(sentences[index]);

      if (currentSpeaker === 0 && maleVoice) {
        utterance.voice = maleVoice;
      } else if (currentSpeaker === 1 && femaleVoice) {
        utterance.voice = femaleVoice;
      }

      setSpeaker(currentSpeaker);
      setIsSpeaking(true);

      utterance.onend = () => {
        setIsSpeaking(false);
        speak(index + 1);
      };

      utterance.onstart = () => {
        setIsSpeaking(true);
      };

      speechSynthesis.speak(utterance);
      currentSpeaker = (currentSpeaker + 1) % 2;
    };

    speak(0);
  };

  // ✅ Read text file and load it into the text box
  const handleFileUpload = (e) => {
    const file = e.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = (e) => {
      setText(e.target.result);
    };
    reader.readAsText(file);
  };

  return (
    <div className="min-h-screen bg-gray-900 text-white flex flex-col items-center justify-center p-6">
      <h1 className="text-3xl md:text-4xl font-bold mb-6 text-center">
        🎙️ Text to Podcast Generator
      </h1>

      <input
        type="file"
        accept=".txt"
        onChange={handleFileUpload}
        className="mb-4 text-white"
      />

      <InputSection text={text} setText={setText} onSubmit={handleSubmit} />
      <SpeakerDisplay speaker={speaker} />
      <AudioWave isSpeaking={isSpeaking} />
    </div>
  );
}

export default App;











(currentSpeaker);
      currentSpeaker = (currentSpeaker + 1) % 2;

      utterance.onend = () => speak(index + 1);
      speechSynthesis.speak(utterance);
    };

    speak(0);
  };

  return (
    <div className="min-h-screen bg-gray-900 text-white flex flex-col items-center justify-center p-6">
      <h1 className="text-3xl md:text-4xl font-bold mb-6 text-center">
        🎙️ Text to Podcast Generator
      </h1>

      <InputSection text={text} setText={setText} onSubmit={handleSubmit} />
      <SpeakerDisplay speaker={speaker} />
    </div>
  );
}

export default App;



haa




import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App.jsx';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);




if (currentSpeaker === 0 && maleVoice) {
        utterance.voice = maleVoice;
      } else if (currentSpeaker === 1 && femaleVoice) {
        utterance.voice = femaleVoice;
      }
